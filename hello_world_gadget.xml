<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Dynamo"
    description="Gmail contextual gadget"
    height="50"
    author=""
    author_email="..."
    author_location="Netage">

    <!-- Declare feature dependencies. -->

    <!-- This one is not specific to Gmail contextual gadgets. -->
    <Require feature="dynamic-height"/>
    <Require feature="setprefs" />
    <Require feature="locked-domain" />
    
    <!-- The next feature, google.contentmatch, is required for all
     Gmail contextual gadgets.
     <Param> - specify one or more comma-separated extractor IDs in
     a param named "extractors". This line is overridden by the extractor ID
     in the manifest, but is still expected to be present. -->
    <Require feature="google.contentmatch">
      <Param name="extractors">
        google.com:MessageIDExtractor
      </Param>
    </Require>

  </ModulePrefs>

  <!-- Define the content type and display location. The settings
   "html" and "card" are required for all Gmail contextual gadgets. -->
  <Content type="html" view="card">
    <![CDATA[
     
       <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
    <script type="text/javascript">

        var prefKey = "userid";

        $(document).ready(function () {

            $("<input id='loginbtn' type='submit' name='loginbtn' value='Login' />").appendTo("#myForm");
            $("<input id='logoutbtn' type='submit' name='logoutbtn' value='Logout' />").appendTo("#myForm");
            $("<input id='quickAdd' type='submit' name='quickAdd' value='Quick Add' />").appendTo("#myForm");
            $("<input id='advAddGetInfo' type='submit' name='advAddGetInfo' value='Advanced Add' />").appendTo("#myForm");
            $("<input id='advAddUpld' type='submit' name='advAddUpld' value='Upload' />").appendTo("#myForm");

            //$('<select multiple><option value="f">First</option><option value="s">Second</option><option value="t">Third</option><option value="fr">Forth</option></select>').appendTo('#myForm').select({ width: 100 });
            //$('<input type="checkbox" id="cbtest" />').appendTo('#myForm').checkbox({ bgcolor: '#333' });

            var dd = getData();

            var attachmentsColModel = [
                        { label: '', propName: '', type: 'checkbox' },
   		                { label: 'File Name', propName: 'FileName', width: 55 },
   		                { label: 'Document Categories', type: 'select multiple', propName: 'DocumentCategories', width: 190 },
   		                { label: 'Document Status', type: 'select', propName: 'DocumentStatus', width: 100 }
            ];           
            
            $('<table id="attGrid"/>').appendTo('#myForm').grid({ data: dd.EmailInfo.Attachments, colModel: attachmentsColModel, parentId: 'attGrid' });

            var attachmentsColModel2 = [
                        { label: '', propName: '', type: 'checkbox' },
   		                { label: 'File Name', propName: 'FileName', width: 55 },
   		                { label: 'Document Categories', type: 'select multiple', propName: 'DocumentCategories', width: 190 },
   		                { label: 'Document Status', type: 'select', propName: 'DocumentStatus', width: 100 }
            ];

            $('<table id="attGrid2"/>').appendTo('#myForm').grid({ data: dd.EmailInfo.Attachments, colModel: attachmentsColModel2, parentId: 'attGrid2' });

            $("<br />").appendTo("#myForm");
            $("<label id='msgid'></label>").appendTo("#myForm");

            showStatus();

            $('#advAddUpld').click(function () {
                var guid = getPref(prefKey);
                if (!guid) return false;
                var url = geturl() + 'api/dynamo/Upload?uid=' + guid;
                //var url = geturl() + 'api/dynamo/Upload';

                var data = JSON.stringify(getData());
                //var data  = JSON.stringify({ val1: 'asda', val2: 'asda' });

                $.ajax({
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: data,
                    url: url,
                    success: function (data) {
                        console.log(data);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('error ' + xhr.status + ' ' + xhr.response);
                    }
                });

                return false;
            });

            $('#advAddGetInfo').click(function () {
                var guid = getPref(prefKey);
                if (!guid) return false;
                var url = geturl() + 'api/dynamo/GetInfo?uid=' + guid + '&msgid=' + getMessageId();

                $.ajax({
                    type: 'GET',
                    cache: false,
                    async: true,
                    url: url,
                    success: function (data) {
                        deserialize(data);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(xhr.status + ' ' + xhr.response);
                    }
                });

                return false;
            });

            //if (gadgets)
              //  gadgets.window.adjustHeight(50);
        });

        function showStatus() {
            var guid = getPref(prefKey);
            if (guid) {
                $('#msgid').text('Logged In');
            }
            else {
                $('#msgid').text('Logged Out');
            }
        }
        
        function geturl() {
            return 'https://rome.netagesolutions.com:3434/';
        }
        
        function getPref(key) {
            var prefs = new gadgets.Prefs();
            return prefs.getString(key);
        }

        function setPref(key, val) {
            var prefs = new gadgets.Prefs();
            prefs.set(key, val);
        }

        function getMessageId() {
            var matches = google.contentmatch.getContentMatches();

            for (var match in matches)
                for (var key in matches[match])
                    if (key == 'message_id')
                        return matches[match][key];
        }


    </script>
      
      <form id="myForm">
      </form>
    ]]>
  </Content>
</Module>